#!/usr/bin/env python
from os import path
import random
import threading
import numpy

from pcaspy import Driver, SimpleServer

MIN_ACQUIRE_TIME = 0.001
MAX_POINTS = 1000

DATA_FILE = 'J2_100517_2_24x24_t30r_scan1_mca.dat'

DATA_FILE_PATH = path.join(path.dirname(path.realpath(__file__)),
                      '..', 'data', DATA_FILE)



prefix = 'XPRESS_DEMO:'
pvdb = {
    'Acquire': {'type': 'enum', 'enums': ['STOP', 'START'], 'asg': 'default'},
    'AcquireTime': {'prec': 3, 'unit': 's', 'value': 1.0, 'asg': 'default'},
    'ARR1:ArrayData': {'count': MAX_POINTS, 'prec': 5, 'asg': 'default'},
    'ArrayCounter_RBV': {'type': 'int', 'value': 0, 'asg': 'default'},

}

class myDriver(Driver):
    def __init__(self):
        Driver.__init__(self)
        self.data = self.load_data()
        self.eid = threading.Event()
        self.tid = threading.Thread(target=self.run_detector)
        self.tid.setDaemon(True)
        self.tid.start()

    def load_data(self):
        print('Loading synthetic data from: ', DATA_FILE_PATH)
        with open(DATA_FILE_PATH, 'r') as f:
            lines = f.readlines()
        data = []
        for l in lines:
            # Skip the record #
            data.append(numpy.asarray(l.split(" ")[1:], dtype=numpy.int32))
        return data

    def get_data(self, index=-1):
        if index == -1:
            index = random.randint(0, len(self.data))
        try:
            return self.data[index]
        except IndexError:
            return []

    def write(self, reason, value):
        status = True
        # take proper actions
        if reason == 'AcquireTime':
            value = max(MIN_ACQUIRE_TIME, value)
        elif reason == 'Acquire':
            if not self.getParam('Acquire') and value == 1:
                self.eid.set()
                self.eid.clear()
        # store the values
        if status:
            self.setParam(reason, value)
        return status

    def run_detector(self):
        counter = 0
        while True:
            run = self.getParam('Acquire')
            updateTime = self.getParam('AcquireTime')
            if run:
                self.eid.wait(updateTime)
            else:
                self.eid.wait()
            run = self.getParam('Acquire')
            if not run:
                counter = 0
                self.setParam('ArrayCounter_RBV', 0)
                self.updatePV('ArrayCounter_RBV')
                continue
            counter += 1

            self.setParam('ArrayCounter_RBV', counter)
            self.setParam('ARR1:ArrayData', self.get_data())
            # do updates so clients see the changes
            self.updatePVs()


if __name__ == '__main__':
    try:
        print('Starting testing-ioc')
        print('PV Prefix: ', prefix)
        server = SimpleServer()
        server.createPV(prefix, pvdb)
        driver = myDriver()
        # process CA transactions
        while True:
            server.process(0.03)
    except KeyboardInterrupt:
        print('\nInterrupted... finishing testing-ioc')
